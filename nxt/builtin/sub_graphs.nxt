{
    "version": "1.17",
    "alias": "sub_graphs",
    "color": "#6e33bb",
    "mute": false,
    "solo": false,
    "meta_data": {
        "positions": {
            "/_maya_standalone_graph": [
                -240.0,
                60.0
            ],
            "/_sub_graph": [
                -240.0,
                -60.0
            ],
            "/node": [
                -211.77419148282223,
                171.75387183252514
            ]
        }
    },
    "nodes": {
        "/": {
            "code": [
                "import platform",
                "import shutil",
                "import os",
                "import subprocess",
                "import glob"
            ]
        },
        "/_maya_standalone_graph": {
            "instance": "",
            "comment": "This node is meant to run an nxt graph in Maya standalone. ",
            "attrs": {
                "_MAYA_LOCATION": {
                    "comment": "Location for you maya",
                    "type": "raw",
                    "value": "${file::C:/Program Files/Autodesk/Maya${_maya_version}}"
                },
                "_graph_path": {
                    "comment": "The path to your nxt graph you want to run with Maya standalone",
                    "type": "str",
                    "value": "\"\""
                },
                "_maya_run_command": {
                    "comment": "The path to the cli python file. This usually is something setup to run from a shell.",
                    "type": "raw",
                    "value": "os.path.join(constants.EDITOR_DIR, \"integration/maya/run_maya_graph.py\")"
                },
                "_maya_version": {
                    "comment": "Which version of Maya you're using this for. This helps construct MAYA_LOCATION path",
                    "type": "int",
                    "value": "2023"
                },
                "_mayapy_exe": {
                    "comment": "Path to you mayapy.exe",
                    "type": "list",
                    "value": "[\"${_MAYA_LOCATION}/bin/mayapy.exe\"]"
                },
                "_parameters": {
                    "comment": "parameters are arguments you can pass to the graph. eg(\"{'/.name1': 'test', '/.name2': 'test_2''}\")",
                    "type": "dict",
                    "value": "{}"
                },
                "_start_node": {
                    "comment": "The node you wish to run strat running from in the nxt graph",
                    "type": "NoneType",
                    "value": "None"
                },
                "_use_shell": {
                    "comment": "Whether to use a shell or not. Recommend not using this as it pops up a sehll regardless. Read the subprocess python docs for more info",
                    "type": "bool",
                    "value": "False"
                },
                "_wait": {
                    "comment": "Whether or not to wait for the sub-process to finish before continuing",
                    "type": "bool",
                    "value": "False"
                }
            },
            "code": [
                "import nxt_editor.constants as constants",
                "process = subprocess.Popen(${_mayapy_exe} + [${_maya_run_command}] + [\"-g\", ${_graph_path}, \"-p\", \"${_parameters}\"], shell=${_use_shell})",
                "if ${_wait}:",
                "    process.wait()"
            ]
        },
        "/_sub_graph": {
            "attrs": {
                "_cache_file": {},
                "_graph_path": {
                    "type": "NoneType"
                },
                "_parameters": {
                    "type": "dict",
                    "value": "{}"
                },
                "_start": {
                    "type": "NoneType",
                    "value": "None"
                }
            },
            "code": [
                "import os",
                "import sys",
                "from nxt import nxt_node, nxt_path",
                "from nxt.stage import Stage",
                "",
                "if self._graph_path and os.path.isfile(self._graph_path):",
                "    sub_stage = Stage.load_from_filepath(self._graph_path)",
                "    ",
                "    # Assemble parameters dictionary",
                "    params = ${_parameters}",
                "    for attr_name, attr_val in vars(self).items():",
                "        if attr_name in nxt_node.INTERNAL_ATTRS.PROTECTED:",
                "            continue",
                "        if attr_name in ('_graph_path', '_start'):",
                "            continue",
                "        attr_path = nxt_path.make_attr_path(nxt_path.WORLD, attr_name)",
                "        params[attr_path] = attr_val",
                "    try:",
                "        result_rt_layer = sub_stage.execute(parameters=params, start=self._start)",
                "    except ExitGraph as exit_graph:",
                "        result_rt_layer = exit_graph.runtime_layer",
                "    if self._cache_file:",
                "        result_rt_layer.cache_layer.save('${_cache_file}')",
                "    # Bring attributes back from world node onto this node",
                "    world_frame_node = result_rt_layer.cache_layer.lookup(nxt_path.WORLD)",
                "    for attr_name, attr_val in vars(world_frame_node).items():",
                "        if attr_name in nxt_node.INTERNAL_ATTRS.PROTECTED:",
                "            continue",
                "        setattr(self, attr_name, attr_val)"
            ]
        }
    }
}